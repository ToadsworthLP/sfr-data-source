/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package WeatherService;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** This record contains a single timestamped weather forecast entry */
@org.apache.avro.specific.AvroGenerated
public class WeatherMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 6982676742428567948L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WeatherMessage\",\"namespace\":\"WeatherService\",\"doc\":\"This record contains a single timestamped weather forecast entry\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"string\",\"doc\":\"Timestamp of the entry\"},{\"name\":\"temperature\",\"type\":\"double\",\"doc\":\"The temperature in the unit specified by temperature_unit\"},{\"name\":\"temperature_unit\",\"type\":\"string\",\"doc\":\"The unit used for the temperature value\"},{\"name\":\"pressure\",\"type\":\"double\",\"doc\":\"The pressure in the unit specified by pressure_unit\"},{\"name\":\"pressure_unit\",\"type\":\"string\",\"doc\":\"The unit used for the pressure value\"}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<WeatherMessage> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<WeatherMessage> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<WeatherMessage> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<WeatherMessage> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<WeatherMessage> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this WeatherMessage to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a WeatherMessage from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a WeatherMessage instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static WeatherMessage fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** Timestamp of the entry */
    private java.lang.CharSequence timestamp;
    /** The temperature in the unit specified by temperature_unit */
    private double temperature;
    /** The unit used for the temperature value */
    private java.lang.CharSequence temperature_unit;
    /** The pressure in the unit specified by pressure_unit */
    private double pressure;
    /** The unit used for the pressure value */
    private java.lang.CharSequence pressure_unit;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public WeatherMessage() {}

    /**
     * All-args constructor.
     * @param timestamp Timestamp of the entry
     * @param temperature The temperature in the unit specified by temperature_unit
     * @param temperature_unit The unit used for the temperature value
     * @param pressure The pressure in the unit specified by pressure_unit
     * @param pressure_unit The unit used for the pressure value
     */
    public WeatherMessage(java.lang.CharSequence timestamp, java.lang.Double temperature, java.lang.CharSequence temperature_unit, java.lang.Double pressure, java.lang.CharSequence pressure_unit) {
        this.timestamp = timestamp;
        this.temperature = temperature;
        this.temperature_unit = temperature_unit;
        this.pressure = pressure;
        this.pressure_unit = pressure_unit;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

    @Override
    public org.apache.avro.Schema getSchema() { return SCHEMA$; }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return timestamp;
            case 1: return temperature;
            case 2: return temperature_unit;
            case 3: return pressure;
            case 4: return pressure_unit;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: timestamp = (java.lang.CharSequence)value$; break;
            case 1: temperature = (java.lang.Double)value$; break;
            case 2: temperature_unit = (java.lang.CharSequence)value$; break;
            case 3: pressure = (java.lang.Double)value$; break;
            case 4: pressure_unit = (java.lang.CharSequence)value$; break;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'timestamp' field.
     * @return Timestamp of the entry
     */
    public java.lang.CharSequence getTimestamp() {
        return timestamp;
    }


    /**
     * Sets the value of the 'timestamp' field.
     * Timestamp of the entry
     * @param value the value to set.
     */
    public void setTimestamp(java.lang.CharSequence value) {
        this.timestamp = value;
    }

    /**
     * Gets the value of the 'temperature' field.
     * @return The temperature in the unit specified by temperature_unit
     */
    public double getTemperature() {
        return temperature;
    }


    /**
     * Sets the value of the 'temperature' field.
     * The temperature in the unit specified by temperature_unit
     * @param value the value to set.
     */
    public void setTemperature(double value) {
        this.temperature = value;
    }

    /**
     * Gets the value of the 'temperature_unit' field.
     * @return The unit used for the temperature value
     */
    public java.lang.CharSequence getTemperatureUnit() {
        return temperature_unit;
    }


    /**
     * Sets the value of the 'temperature_unit' field.
     * The unit used for the temperature value
     * @param value the value to set.
     */
    public void setTemperatureUnit(java.lang.CharSequence value) {
        this.temperature_unit = value;
    }

    /**
     * Gets the value of the 'pressure' field.
     * @return The pressure in the unit specified by pressure_unit
     */
    public double getPressure() {
        return pressure;
    }


    /**
     * Sets the value of the 'pressure' field.
     * The pressure in the unit specified by pressure_unit
     * @param value the value to set.
     */
    public void setPressure(double value) {
        this.pressure = value;
    }

    /**
     * Gets the value of the 'pressure_unit' field.
     * @return The unit used for the pressure value
     */
    public java.lang.CharSequence getPressureUnit() {
        return pressure_unit;
    }


    /**
     * Sets the value of the 'pressure_unit' field.
     * The unit used for the pressure value
     * @param value the value to set.
     */
    public void setPressureUnit(java.lang.CharSequence value) {
        this.pressure_unit = value;
    }

    /**
     * Creates a new WeatherMessage RecordBuilder.
     * @return A new WeatherMessage RecordBuilder
     */
    public static WeatherService.WeatherMessage.Builder newBuilder() {
        return new WeatherService.WeatherMessage.Builder();
    }

    /**
     * Creates a new WeatherMessage RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new WeatherMessage RecordBuilder
     */
    public static WeatherService.WeatherMessage.Builder newBuilder(WeatherService.WeatherMessage.Builder other) {
        if (other == null) {
            return new WeatherService.WeatherMessage.Builder();
        } else {
            return new WeatherService.WeatherMessage.Builder(other);
        }
    }

    /**
     * Creates a new WeatherMessage RecordBuilder by copying an existing WeatherMessage instance.
     * @param other The existing instance to copy.
     * @return A new WeatherMessage RecordBuilder
     */
    public static WeatherService.WeatherMessage.Builder newBuilder(WeatherService.WeatherMessage other) {
        if (other == null) {
            return new WeatherService.WeatherMessage.Builder();
        } else {
            return new WeatherService.WeatherMessage.Builder(other);
        }
    }

    /**
     * RecordBuilder for WeatherMessage instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WeatherMessage>
            implements org.apache.avro.data.RecordBuilder<WeatherMessage> {

        /** Timestamp of the entry */
        private java.lang.CharSequence timestamp;
        /** The temperature in the unit specified by temperature_unit */
        private double temperature;
        /** The unit used for the temperature value */
        private java.lang.CharSequence temperature_unit;
        /** The pressure in the unit specified by pressure_unit */
        private double pressure;
        /** The unit used for the pressure value */
        private java.lang.CharSequence pressure_unit;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(WeatherService.WeatherMessage.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.temperature)) {
                this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.temperature_unit)) {
                this.temperature_unit = data().deepCopy(fields()[2].schema(), other.temperature_unit);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.pressure)) {
                this.pressure = data().deepCopy(fields()[3].schema(), other.pressure);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.pressure_unit)) {
                this.pressure_unit = data().deepCopy(fields()[4].schema(), other.pressure_unit);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
        }

        /**
         * Creates a Builder by copying an existing WeatherMessage instance
         * @param other The existing instance to copy.
         */
        private Builder(WeatherService.WeatherMessage other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.temperature)) {
                this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.temperature_unit)) {
                this.temperature_unit = data().deepCopy(fields()[2].schema(), other.temperature_unit);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.pressure)) {
                this.pressure = data().deepCopy(fields()[3].schema(), other.pressure);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.pressure_unit)) {
                this.pressure_unit = data().deepCopy(fields()[4].schema(), other.pressure_unit);
                fieldSetFlags()[4] = true;
            }
        }

        /**
         * Gets the value of the 'timestamp' field.
         * Timestamp of the entry
         * @return The value.
         */
        public java.lang.CharSequence getTimestamp() {
            return timestamp;
        }


        /**
         * Sets the value of the 'timestamp' field.
         * Timestamp of the entry
         * @param value The value of 'timestamp'.
         * @return This builder.
         */
        public WeatherService.WeatherMessage.Builder setTimestamp(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.timestamp = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'timestamp' field has been set.
         * Timestamp of the entry
         * @return True if the 'timestamp' field has been set, false otherwise.
         */
        public boolean hasTimestamp() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'timestamp' field.
         * Timestamp of the entry
         * @return This builder.
         */
        public WeatherService.WeatherMessage.Builder clearTimestamp() {
            timestamp = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'temperature' field.
         * The temperature in the unit specified by temperature_unit
         * @return The value.
         */
        public double getTemperature() {
            return temperature;
        }


        /**
         * Sets the value of the 'temperature' field.
         * The temperature in the unit specified by temperature_unit
         * @param value The value of 'temperature'.
         * @return This builder.
         */
        public WeatherService.WeatherMessage.Builder setTemperature(double value) {
            validate(fields()[1], value);
            this.temperature = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'temperature' field has been set.
         * The temperature in the unit specified by temperature_unit
         * @return True if the 'temperature' field has been set, false otherwise.
         */
        public boolean hasTemperature() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'temperature' field.
         * The temperature in the unit specified by temperature_unit
         * @return This builder.
         */
        public WeatherService.WeatherMessage.Builder clearTemperature() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'temperature_unit' field.
         * The unit used for the temperature value
         * @return The value.
         */
        public java.lang.CharSequence getTemperatureUnit() {
            return temperature_unit;
        }


        /**
         * Sets the value of the 'temperature_unit' field.
         * The unit used for the temperature value
         * @param value The value of 'temperature_unit'.
         * @return This builder.
         */
        public WeatherService.WeatherMessage.Builder setTemperatureUnit(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.temperature_unit = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'temperature_unit' field has been set.
         * The unit used for the temperature value
         * @return True if the 'temperature_unit' field has been set, false otherwise.
         */
        public boolean hasTemperatureUnit() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'temperature_unit' field.
         * The unit used for the temperature value
         * @return This builder.
         */
        public WeatherService.WeatherMessage.Builder clearTemperatureUnit() {
            temperature_unit = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'pressure' field.
         * The pressure in the unit specified by pressure_unit
         * @return The value.
         */
        public double getPressure() {
            return pressure;
        }


        /**
         * Sets the value of the 'pressure' field.
         * The pressure in the unit specified by pressure_unit
         * @param value The value of 'pressure'.
         * @return This builder.
         */
        public WeatherService.WeatherMessage.Builder setPressure(double value) {
            validate(fields()[3], value);
            this.pressure = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'pressure' field has been set.
         * The pressure in the unit specified by pressure_unit
         * @return True if the 'pressure' field has been set, false otherwise.
         */
        public boolean hasPressure() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'pressure' field.
         * The pressure in the unit specified by pressure_unit
         * @return This builder.
         */
        public WeatherService.WeatherMessage.Builder clearPressure() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'pressure_unit' field.
         * The unit used for the pressure value
         * @return The value.
         */
        public java.lang.CharSequence getPressureUnit() {
            return pressure_unit;
        }


        /**
         * Sets the value of the 'pressure_unit' field.
         * The unit used for the pressure value
         * @param value The value of 'pressure_unit'.
         * @return This builder.
         */
        public WeatherService.WeatherMessage.Builder setPressureUnit(java.lang.CharSequence value) {
            validate(fields()[4], value);
            this.pressure_unit = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'pressure_unit' field has been set.
         * The unit used for the pressure value
         * @return True if the 'pressure_unit' field has been set, false otherwise.
         */
        public boolean hasPressureUnit() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'pressure_unit' field.
         * The unit used for the pressure value
         * @return This builder.
         */
        public WeatherService.WeatherMessage.Builder clearPressureUnit() {
            pressure_unit = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public WeatherMessage build() {
            try {
                WeatherMessage record = new WeatherMessage();
                record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.temperature = fieldSetFlags()[1] ? this.temperature : (java.lang.Double) defaultValue(fields()[1]);
                record.temperature_unit = fieldSetFlags()[2] ? this.temperature_unit : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.pressure = fieldSetFlags()[3] ? this.pressure : (java.lang.Double) defaultValue(fields()[3]);
                record.pressure_unit = fieldSetFlags()[4] ? this.pressure_unit : (java.lang.CharSequence) defaultValue(fields()[4]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<WeatherMessage>
            WRITER$ = (org.apache.avro.io.DatumWriter<WeatherMessage>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<WeatherMessage>
            READER$ = (org.apache.avro.io.DatumReader<WeatherMessage>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override protected boolean hasCustomCoders() { return true; }

    @Override public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException
    {
        out.writeString(this.timestamp);

        out.writeDouble(this.temperature);

        out.writeString(this.temperature_unit);

        out.writeDouble(this.pressure);

        out.writeString(this.pressure_unit);

    }

    @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException
    {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);

            this.temperature = in.readDouble();

            this.temperature_unit = in.readString(this.temperature_unit instanceof Utf8 ? (Utf8)this.temperature_unit : null);

            this.pressure = in.readDouble();

            this.pressure_unit = in.readString(this.pressure_unit instanceof Utf8 ? (Utf8)this.pressure_unit : null);

        } else {
            for (int i = 0; i < 5; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
                        break;

                    case 1:
                        this.temperature = in.readDouble();
                        break;

                    case 2:
                        this.temperature_unit = in.readString(this.temperature_unit instanceof Utf8 ? (Utf8)this.temperature_unit : null);
                        break;

                    case 3:
                        this.pressure = in.readDouble();
                        break;

                    case 4:
                        this.pressure_unit = in.readString(this.pressure_unit instanceof Utf8 ? (Utf8)this.pressure_unit : null);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










